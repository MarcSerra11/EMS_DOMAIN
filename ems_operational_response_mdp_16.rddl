domain ems_operational_response_mdp_16 {

	requirements {
		reward-deterministic,
		integer-valued,
		continuous,
		intermediate-nodes
	};

	types {
		vehicle : object;
		area : { @a1, @a2};
		patient : {@p1, @p2};
		hospital : {@h1};
		base : {@b1};
	};
	
	
	
	pvariables { 
			
		//////////////////// non-fluents ////////////////////
		
		// CONSTANTS
		WAIT : { non-fluent, real, default = 0.5  };
		STABILIZATION_TIME : { non-fluent, int, default = 5  };
		
		// Hopital position
		h_position(hospital) : { non-fluent, area, default = @a1 };
		
		// Base position
		b_position(base) : { non-fluent, area, default = @a1 };
		
		// TRAVEL TIME
		aa_travelTime(area, area) : { non-fluent, int, default = 3  };
		
		// PoissonLambda
		a_poissonLambda(area) : { non-fluent, real, default = 0.5  };
		
		
		//////////////////// interm-fluents ////////////////////


		//////////////////// state-fluents ////////////////////
		
		
		// Vehicle states
		
			// Vehicle executing actions
			//v_waiting(vehicle) : { state-fluent, bool, default = true };
			//v_onTravelToPatient(vehicle) : { state-fluent, bool, default = false };
			//v_stabilizing(vehicle) : { state-fluent, bool, default = false };
			//v_onTravelToHospital(vehicle) : { state-fluent, bool, default = false };
			//v_redeploying(vehicle) : { state-fluent, bool, default = false };
		
			// Vehicle position
			v_position(vehicle) : { state-fluent, area, default = @a1 };
			
			// Vehicle assign objective 
			v_assignedPatient(vehicle) : { state-fluent, patient, default = @p1 };
			//v_assignedHospital(vehicle) : { state-fluent, hospital, default = h0 };
			//v_assignedBase(vehicle) : { state-fluent, base, default = h0 };
			
			// Vehicle remaining action time
			//v_remainingActionTime(vehicle) : { state-fluent, int, default = 0 };
		
		// Patient states
		
			// Patient id
			p_id(patient) : { non-fluent, int, default = 0};
			
			// Patient position
			p_position(patient) : { non-fluent, area, default = @a1 };
						
			// Patient waiting time
			//p_waitingTime(patient) : { state-fluent, int, default = 0 };

			// Patient active
			//p_active(patient) : { state-fluent, bool, default = false };
			
			// Patient stabilized
			//p_stabilized(patient) : { state-fluent, bool, default = false };
			
			// Patient solved
			//p_rescued(patient) : { state-fluent, bool, default = false };
		
		
		// Area states
		
			// New patients
			//a_newPatients(area) : { state-fluent, int, default = 0 };
			
			// Patients previously generated
			//a_previousPatients(area) : { state-fluent, int, default = 0 };
			
			
		//////////////////// action-fluents ////////////////////

		
		//Vehicle actions
			//Attend a patient
			v_attendPatient(vehicle, patient) : { action-fluent, bool, default = false };
			
			//Transfer to hospital
			//v_transferToHospital(vehicle) : { action-fluent, hospital, default = h0 };
			
			//Travel to ambulance base
			//v_travelToBase(vehicle) : { action-fluent, base, default = b0 };


	};
	
	cpfs {

		//Update vehicle position
		v_position'(?v) = if (v_attendPatient(?v, @p1) == true) 
						then @a1
						else @a2;
						
		v_assignedPatient'(?v) = 	if (v_attendPatient(?v, @p1)) then @p1
						else if (v_attendPatient(?v, @p2)) then @p2
						else v_assignedPatient(?v);
			
		
		
		
	};
  
	
	reward = 	sum_{?v : vehicle} [if (v_attendPatient(?v, @p1) == true)
						then 1.0
						else 0.0 ];
	

}

