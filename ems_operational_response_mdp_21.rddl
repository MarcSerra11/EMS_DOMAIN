domain ems_operational_response_mdp_21 {

	requirements {
		reward-deterministic,
		integer-valued,
		continuous,
		intermediate-nodes
	};

	types {
		vehicle : object;
		area : { @a1, @a2};
		number : { @0, @1, @2, @3, @4, @5, @6, @7, @8 };

	};
	
	
	
	pvariables { 
			
		//////////////////// non-fluents ////////////////////
		
		// CONSTANTS
		STABILIZATION_TIME : { non-fluent, number, default = @3  };
		
		
		// Area non-fluents
		a_hospital(area) : { non-fluent, bool, default = false };
		a_base(area) : { non-fluent, bool, default = false };
		a_emergencyProbability(area) : { non-fluent, real, default = 0.1 };
		
		// TRAVEL TIME
		aa_travelTime(area, area) : { non-fluent, number, default = @2  };
		
		//REWARDS
		n_penalization(number) : { non-fluent, real, default = -1  };
		


		//////////////////// state-fluents ////////////////////
			
		// VEHICLE STATES
		
		// Vehicle on course task
		v_waiting(vehicle) : 			{ state-fluent, bool, default = true };
		v_attendingPatient(vehicle) : 	{ state-fluent, bool, default = false };
		v_waitingHospitalAssign(vehicle):     { state-fluent, bool, default = false };
		v_travelingToHospital(vehicle) : 	{ state-fluent, bool, default = false };
		v_travelingToBase(vehicle) : 		{ state-fluent, bool, default = false };
		
		// Vehicle objective 
		v_assignedPatient(vehicle) : 		{ state-fluent, area, default = @a1 };
		v_assignedHospital(vehicle) : 	{ state-fluent, area, default = @a1 };
		v_assignedBase(vehicle) : 		{ state-fluent, area, default = @a1 };
		
		// Vehicle position
		v_position(vehicle) : 			{ state-fluent, area, default = @a1 };		
		
		// Vehicle remaining action time
		v_remainingActionTime(vehicle) : 	{ state-fluent, number, default = @0 };
		
		
		// AREA STATES
		a_patientGenerate(area) : 		{ state-fluent, bool, default = false };
		a_patientActive(area) : 		{ state-fluent, bool, default = false };
		a_patientStabilized(area) : 		{ state-fluent, bool, default = false };
		a_patientWaitingTime(area) :  	{ state-fluent, number, default = @0 };
		
					
			
		//////////////////// action-fluents ////////////////////

		//VEHICLE ACTIONS
		v_attendPatient(vehicle, area) : { action-fluent, bool, default = false };
		v_travelToHsopital(vehicle, area) : { action-fluent, bool, default = false };
		v_travelToBase(vehicle, area) : { action-fluent, bool, default = false };


	};
	
	cpfs {
	

		// VEHICLE STATES
		
		// Vehicle on course task
		v_waiting'(?v) = if ( exists_{?a : area} [ v_attendPatient(?v, ?a) | v_travelToBase(?v, ?a) ] )
					then false
					else if ( (v_travelingToHospital(?v) | v_travelingToBase(?v) ) & v_remainingActionTime(?v)==@0 )
						then true
						else v_waiting(?v);

		v_attendingPatient'(?v) = if ( exists_{?a : area} [ v_attendPatient(?v, ?a) ] )
						then true
						else if (v_attendingPatient(?v) & v_remainingActionTime(?v)==@0 ) 
							then false
							else v_attendingPatient(?v);
							
							
		v_waitingHospitalAssign'(?v) = if (v_attendingPatient(?v) & v_remainingActionTime(?v)==@0 )
							then true
							else if ( exists_{?a : area} [ v_travelToHsopital(?v, ?a) ] )
								then false
								else v_waitingHospitalAssign(?v);
								
		v_travelingToHospital'(?v) = if (exists_{?a : area} [ v_travelToHsopital(?v, ?a) ])	
							then true
							else if (v_travelingToHospital(?v) & v_remainingActionTime(?v)==@0)	
								then false
								else v_travelingToHospital(?v);
		
		v_travelingToBase'(?v) = if ( exists_{?a : area} [v_travelToBase(?v, ?a)] )
					then true
					else if (v_travelingToBase(?v) & v_remainingActionTime(?v)==@0) 
						then false 
						else v_travelingToBase(?v);
	
	
		//Update vehicle objectives 
		v_assignedPatient'(?v) = if (v_attendPatient(?v, @a1)) then @a1
					else if (v_attendPatient(?v, @a2)) then @a2
					else v_assignedPatient(?v);
					
		v_assignedHospital'(?v) = if (v_travelToHsopital(?v, @a1)) then @a1
					else if (v_travelToHsopital(?v, @a2)) then @a2
					else v_assignedHospital(?v);
					
		v_assignedBase'(?v) = if (v_travelToBase(?v, @a1)) then @a1
					else if (v_travelToBase(?v, @a2)) then @a2
					else v_assignedBase(?v);
					

		//Update vehicle position
		v_position'(?v) = 	if (v_attendingPatient(?v) & v_remainingActionTime(?v)==@0 ) then v_assignedPatient(?v)
					else if (v_travelingToHospital(?v) & v_remainingActionTime(?v)==@0 ) then v_assignedHospital(?v)
					else if (v_travelingToBase(?v) & v_remainingActionTime(?v)==@0 ) then v_assignedBase(?v)
					else v_position(?v);
		
						
		// Vehicle remaining action time
		v_remainingActionTime'(?v) = 	if (v_remainingActionTime(?v)==@8) then @7
						else if (v_remainingActionTime(?v)==@7) then @6
						else if (v_remainingActionTime(?v)==@6) then @5
						else if (v_remainingActionTime(?v)==@5) then @4
						else if (v_remainingActionTime(?v)==@4) then @3
						else if (v_remainingActionTime(?v)==@3) then @2
						else if (v_remainingActionTime(?v)==@2) then @1
						else if (v_remainingActionTime(?v)==@1) then @0
						else if (v_position(?v)==@a1 & (v_attendPatient(?v, @a1) | v_travelToHsopital(?v, @a1) | v_travelToBase(?v, @a1) ) ) then ( aa_travelTime(@a1, @a1) ) 
						else if (v_position(?v)==@a2 & (v_attendPatient(?v, @a1) | v_travelToHsopital(?v, @a1) | v_travelToBase(?v, @a1) ) ) then ( aa_travelTime(@a2, @a1) )  
						else @0; 			
						

		//else if (v_attendPatient(?v)~=v_attendPatient.default) 
		//	then aa_travelTime(v_position(?v),p_position(v_attendPatient(?v)))
		//	else if (v_onTravelToPatient(?v) & v_remainingActionTime(?v)==0 )
		//		then STABILIZATION_TIME
		//		else if (v_transferToHospital(?v)~=v_transferToHospital.default) 
		//			then aa_travelTime(v_position(?v),h_position(v_transferToHospital(?v)))
		//			else if (v_travelToBase(?v)~=v_travelToBase.default)
		//				then aa_travelTime(v_position(?v), b_position(v_travelToBase(?v)))
		//				else v_remainingActionTime(?v);
						
		
		//UPDATE AREA STATES 
		
		a_patientGenerate'(?a) = if ( ~ a_patientActive(?a) ) then Bernoulli( a_emergencyProbability(?a) )
					else false;
		
		a_patientActive'(?a) = if (a_patientGenerate(?a)) then true
					else if ( exists_{?v : vehicle} [ v_assignedPatient(?v)==?a & v_travelingToHospital(?v) & v_remainingActionTime(?v)==@0 ] ) then false
					else a_patientActive(?a); 
		
		
		a_patientStabilized'(?a) = if (a_patientGenerate(?a)) then false
					   	else if ( exists_{?v : vehicle} [ v_assignedPatient(?v)==?a & v_attendingPatient(?v) & v_remainingActionTime(?v)==@0 ] ) then true
						else a_patientStabilized(?a);	
		
		
		a_patientWaitingTime'(?a) = 	if (a_patientGenerate(?a)) then @0
						else if (a_patientActive(?a) & a_patientWaitingTime(?a)==@0) then @1
						else if (a_patientActive(?a) & a_patientWaitingTime(?a)==@1) then @2
						else if (a_patientActive(?a) & a_patientWaitingTime(?a)==@2) then @3
						else if (a_patientActive(?a) & a_patientWaitingTime(?a)==@3) then @4
						else if (a_patientActive(?a) & a_patientWaitingTime(?a)==@4) then @5
						else if (a_patientActive(?a) & a_patientWaitingTime(?a)==@5) then @6
						else if (a_patientActive(?a) & a_patientWaitingTime(?a)==@6) then @7
						else if (a_patientActive(?a) & a_patientWaitingTime(?a)==@7) then @8
						else a_patientWaitingTime(?a); 
		
		
	};
  
	
	reward = 	sum_{?a : area} [ if (a_patientWaitingTime(?a)==@0) then (~a_patientStabilized(?a))*n_penalization(@0)
						else if (a_patientWaitingTime(?a)==@1) then (~a_patientStabilized(?a))*n_penalization(@1)
						else if (a_patientWaitingTime(?a)==@2) then (~a_patientStabilized(?a))*n_penalization(@2)
						else 0 ];
	
						
	action-preconditions {
	
		//Execute only one action
		(forall_{?v : vehicle} [ (sum_{?a : area} [v_attendPatient(?v, ?a)])  
					+ (sum_{?a : area} [v_travelToHsopital(?v, ?a)]) 
					+ (sum_{?a : area} [v_travelToBase(?v, ?a)]) <= 1] );
					
					
		( forall_{?v : vehicle} [ ( exists_{?a : area} [v_attendPatient(?v, ?a)] ) => v_waiting(?v) ] );
		
		( forall_{?v : vehicle} [ ( exists_{?a : area} [v_travelToHsopital(?v, ?a)] ) => v_waitingHospitalAssign(?v) ] );
		
		( forall_{?v : vehicle} [ ( exists_{?a : area} [v_travelToBase(?v, ?a)] ) =>  v_waiting(?v) ] );
	
						
				
	
	};
	

}

